#!/bin/bash

target=$1
top_port=13999
low_port=9000
mid_port=$(( (($top_port - $low_port)/2) + $low_port ))
port_range=$(( $top_port - $low_port ))

while [ $port_range -gt 5 ]; do
	printf "Testing %d.....\r" $mid_port
	result=$(timeout --foreground --signal=9 10 ssh -q -o StrictHostKeyChecking=No $target -p $mid_port)

	if [[ $result =~ Higher ]]; then	
		top_port=$mid_port
	elif [[ $result =~ Lower ]]; then
		low_port=$mid_port
	else
		printf "\nConnect to the real SSH service using:\n"
		printf "ssh %s -p %d\n" $target $mid_port		
		exit 0
fi
	mid_port=$(( (($top_port - $low_port)/2) + $low_port ))
	port_range=$(( $top_port - $low_port ))
done

for i in range {0..5}; do
	port=$(( $low_port + $i ))
	printf "Testing %s.....\r" $port
	result=$(timeout --foreground --signal=9 10 ssh -q -o StrictHostKeyChecking=No $target -p $port)
	
#	echo "DEBUG RESULT: $result"
# NOTE - the ciphertext poem is in $result here when correct port is found, and could be used to decode the Secret
# for display in the exit message

	if [[ $result =~ Higher ]] || [[ $result =~ Lower ]]; then
	        continue
	else
		printf "\nConnect to the real SSH service using:\n"
		printf "ssh %s -p %d\n" $target $port
		break
	fi
done
