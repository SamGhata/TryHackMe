#!/bin/bash
#
# attempts connection to each port
# and uses Higher/Lower information given on fake services
# to reduce scan range by half, until 5 ports remain
#
# then test each until a timeout (10 seconds)
# is created when the correct port is found
#
# unlikely the port is found during the first round, 
# but is handled

target=$1
top_port=13999
low_port=9000
mid_port=$(( (($top_port - $low_port)/2) + $low_port ))
port_range=$(( $top_port - $low_port ))

err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
}

if ! $1; then
  err "IP address required: ./ssh-search 10.10.10.10"
  exit 1
fi

printf "Testing"

while [ $port_range -gt 5 ]; do
  printf "."
  result=$(timeout --foreground --signal=2 10 ssh -q -o StrictHostKeyChecking=No $target -p $mid_port)
  if [[ $result =~ Higher ]]; then	
    top_port=$mid_port
  elif [[ $result =~ Lower ]]; then
    low_port=$mid_port
  else
    printf "\nConnect to the real SSH service using:\n"
    printf "ssh %s -p %s\n" $target $mid_port		
    exit 0
  fi
  mid_port=$(( (($top_port - $low_port)/2) + $low_port ))
  port_range=$(( $top_port - $low_port ))
done

for (( port=$low_port; port<=$top_port; port++ )); do
  printf "."
  result=$(timeout --foreground --signal=2 10 ssh -q -o StrictHostKeyChecking=No $target -p $port)
  if [[ $result =~ Higher ]] || [[ $result =~ Lower ]]; then
    continue
  else
    printf "\nConnect to the real SSH service using:\n"
    printf "ssh %s -p %s" $target $port
    break
  fi
done
