#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Feb  9 20:11:02 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set ip [lindex $argv 0]
set port [lindex $argv 1]
spawn ssh -q -o StrictHostKeyChecking=no $ip -p $port
match_max 100000
expect -exact "You've found the real service.\r
Solve the challenge to get access to the box\r
Jabberwocky\r
'Mdes mgplmmz, cvs alv lsmtsn aowil\r
Fqs ncix hrd rxtbmi bp bwl arul;\r
Elw bpmtc pgzt alv uvvordcet,\r
Egf bwl qffl vaewz ovxztiql.\r
\r
'Fvphve ewl Jbfugzlvgb, ff woy!\r
Ioe kepu bwhx sbai, tst jlbal vppa grmjl!\r
Bplhrf xag Rjinlu imro, pud tlnp\r
Bwl jintmofh Iaohxtachxta!'\r
\r
Oi tzdr hjw oqzehp jpvvd tc oaoh:\r
Eqvv amdx ale xpuxpqx hwt oi jhbkhe--\r
Hv rfwmgl wl fp moi Tfbaun xkgm,\r
Puh jmvsd lloimi bp bwvyxaa.\r
\r
Eno pz io yyhqho xyhbkhe wl sushf,\r
Bwl Nruiirhdjk, xmmj mnlw fy mpaxt,\r
Jani pjqumpzgn xhcdbgi xag bjskvr dsoo,\r
Pud cykdttk ej ba gaxt!\r
\r
Vnf, xpq! Wcl, xnh! Hrd ewyovka cvs alihbkh\r
Ewl vpvict qseux dine huidoxt-achgb!\r
Al peqi pt eitf, ick azmo mtd wlae\r
Lx ymca krebqpsxug cevm.\r
\r
'Ick lrla xhzj zlbmg vpt Qesulvwzrr?\r
Cpqx vw bf eifz, qy mthmjwa dwn!\r
V jitinofh kaz! Gtntdvl! Ttspaj!'\r
Wl ciskvttk me apw jzn.\r
\r
'Awbw utqasmx, tuh tst zljxaa bdcij\r
Wph gjgl aoh zkuqsi zg ale hpie;\r
Bpe oqbzc nxyi tst iosszqdtz,\r
Eew ale xdte semja dbxxkhfe.\r
Jdbr tivtmi pw sxderpIoeKeudmgdstd\r
Enter Secret:	"
send -- "bewareTheJabberwock\r"
expect eof
